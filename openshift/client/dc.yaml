---
kind: Template
apiVersion: v1
metadata:
  name: ${NAME}${SUFFIX}
  annotations:
    description: Deployment template for a nodejs server and postgres db.
    tags: node
    iconClass: icon-node
objects:
  - apiVersion: v1
    kind: ImageStream
    metadata:
      labels:
        shared: "true"
      name: ${NAME}
    spec:
      lookupPolicy:
        local: true
  - kind: Service
    apiVersion: v1
    metadata:
      name: "${NAME}${SUFFIX}"
      annotations:
        description: Exposes and load balances the application pods
      labels:
        app: "${NAME}"
    spec:
      ports:
        - name: ${PORT}-tcp
          port: ${{PORT}}
          targetPort: ${{PORT}}
      selector:
        deploymentconfig: "${NAME}${SUFFIX}"
  - kind: Route
    apiVersion: v1
    metadata:
      name: "${NAME}${SUFFIX}"
      labels:
        app: "${NAME}"
    spec:
      host: "${NAME}${SUFFIX}.${NAMESPACE}.apps.silver.devops.gov.bc.ca"
      port:
        targetPort: ${PORT}-tcp
      path: ''
      to:
        kind: Service
        name: "${NAME}${SUFFIX}"
        weight: 100
      tls:
        termination: edge
  - kind: DeploymentConfig
    apiVersion: v1
    metadata:
      name: "${NAME}${SUFFIX}"
      labels:
        app: "${NAME}"
      annotations:
        description: Defines how to deploy the application server
    spec:
      strategy:
        type: Rolling
      triggers:
        - type: ImageChange
          imageChangeParams:
            automatic: true
            containerNames:
              - ${NAME}${SUFFIX}
            from:
              kind: ImageStreamTag
              name: "${NAME}:${VERSION}"
        - type: ConfigChange
      replicas: 1
      selector:
        name: "${NAME}${SUFFIX}"
      template:
        metadata:
          name: "${NAME}${SUFFIX}"
          labels:
            name: "${NAME}${SUFFIX}"
            app: "${NAME}"
        spec:
          containers:
            - name: "${NAME}${SUFFIX}"
              image: " "
              ports:
                - name: "${NAME}"
                  containerPort: ${{PORT}}
                  protocol: TCP
              livenessProbe:
                failureThreshold: 3
                httpGet:
                  path: /
                  port: ${{PORT}}
                  scheme: HTTP
                initialDelaySeconds: 60
                periodSeconds: 10
                successThreshold: 1
                timeoutSeconds: 3
              readinessProbe:
                failureThreshold: 3
                httpGet:
                  path: /
                  port: ${{PORT}}
                  scheme: HTTP
                initialDelaySeconds: 25
                periodSeconds: 10
                successThreshold: 1
                timeoutSeconds: 2
              resources:
                requests:
                  memory: 256Mi
                  cpu: 500m
                limits:
                  memory: 512Mi
                  cpu: 1
              env:
                - name: PORT
                  value: "${PORT}"
parameters:
  - name: PORT
    required: true
    value: "8080"
    description: service open port
  - name: NAME
    required: true
    value: rdsi-client
  - name: NAMESPACE
    required: true
  - name: VERSION
    required: true
    description: version as an image tag
  - name: SUFFIX
    description: version as an image tag
    required: false
