openapi: 3.0.0
info:
  title: RDSI API
  description: RDSI API
  version: 1.0.0
  # TODO: (nick) need to update descriptions and summaries

servers:
  - url: https://rdsi-client.adccd1-prod.apps.silver.devops.gov.bc.ca/api/v1
    description: RDSI API Production
  - url: http://localhost:8080/api/v1
    description: RDSI API Test

paths:
  /api/v1/signup:
    post:
      tags:
        - Auth
        - Users
      summary: Sign up with user profile
      requestBody:
        description: userdata
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserRequest"
      responses:
        201:
          description: "Created"
        400:
          description: "Bad Request"
        409:
          description: "Conflict"
        500:
          description: "Server Error"

  /api/v1/login:
    post:
      tags:
        - Auth
      summary: Login with email and password
      requestBody:
        description: userdata
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/LoginRequest"
      responses:
        200:
          description: "OK"
        409:
          description: "Conflict"

  /api/v1/logout:
    security:
      - bearerAuth: []
    post:
      tags:
        - Auth
      summary: Log out with auth
      responses:
        200:
          description: "OK"
        401:
          description: "Unauthorized"

  /api/v1/users:
    # [GET] users
    get:
      security:
        - bearerAuth: []
      tags:
        - Users
      summary: Find All Users
      responses:
        200:
          description: A list of users.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
        401:
          description: 'Unauthorized'
        500:
          description: "Server Error"

    # [POST] users
    post:
      tags:
        - Users
      summary: Add User
      security:
        - bearerAuth: []
      requestBody:
        description: userdata
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserRequest"
      responses:
        201:
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        400:
          description: Bad Request
        409:
          description: Conflict
        500:
          description: Server Error

  /api/v1/users/{id}:
    # [GET] users/id
    get:
      tags:
        - Users
      summary: Find User By Id
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          description: User Id
          required: true
      responses:
        200:
          description: "OK"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        401:
          $ref: '#/components/responses/UnauthorizedError'
        409:
          description: "Conflict"
        500:
          description: "Server Error"

    # [PATCH] users/id
    patch:
      tags:
        - Users
      summary: Update User By Id
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          type: string
          description: user Id
          required: true
      requestBody:
        description: user data
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserRequest"
      responses:
        200:
          description: "OK"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        400:
          description: "Bad Request"
        401:
          $ref: '#/components/responses/UnauthorizedError'
        409:
          description: "Conflict"
        500:
          description: "Server Error"

    # [DELETE] users/id
    delete:
      tags:
        - Users
      summary: Delete User By Id
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          description: user Id
          required: true
      responses:
        200:
          description: "OK"
        409:
          description: "Conflict"
        500:
          description: "Server Error"

  # [GET] projects
  /api/v1/projects:
    get:
      tags:
        - Projects
      security:
        - bearerAuth: []
      summary: Find all projects
      responses:
        200:
          description: OK
        500:
          description: Server Error
    post:
      tags:
        - Projects
      summary: Add project
      security:
        - bearerAuth: []
      requestBody:
        description: project data
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ProjectRequest"
      responses:
        201:
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Project'
        400:
          description: Bad Request
        409:
          description: Conflict
        500:
          description: Server Error

  /api/v1/projects/{id}:
    # [GET] projects/id
    get:
      tags:
        - Projects
      summary: Find all projects
      security:
        - bearerAuth: []
      responses:
        200:
          description: OK
        400:
          description: Bad request
        401:
          description: Unauthrized
        500:
          description: Server Error
    # [PATCH] projects/id
    patch:
      tags:
        - Projects
      summary: Update a project by id
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          description: project id
          required: true
      requestBody:
        description: project data
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ProjectRequest"
      responses:
        200:
          description: 'Updated'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Project'
        400:
          description: "Bad Request"
        401:
          description: "Unauthorized"
        409:
          description: "Conflict"
        500:
          description: "Server Error"

    # [DELETE] projects/id
    delete:
      tags:
        - Projects
      summary: Delete a project by ID
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          description: project id
          required: true
      responses:
        200:
          description: "OK"
        400:
          description: "Bad Request"
        401:
          description: "Unauthorized"
        409:
          description: "Conflict"
        500:
          description: "Server Error"

  # [POST] reports
  /api/v1/reports:
    get:
      tags:
        - Reports
      summary: Find reports for the project
      security:
        - bearerAuth: []
      parameters:
        - name: projectId
          in: query
          required: true
        - name: year
          in: query
        - name: quarter
          in: query
          enum: [Q1, Q2, Q3a, Q3b, Q4]
          description: report period, [Q1, Q2, Q3a, Q3b, Q4]
      responses:
        200:
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Report'
        400:
          description: "Bad Request"
        401:
          description: "Unauthorized"
        409:
          description: "Conflict"
        500:
          description: "Server Error"

    post:
      tags:
        - Reports
      summary: Create a report for a project
      security:
        - bearerAuth: [ ]
      requestBody:
        description: report data
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ReportRequest"
      responses:
        201:
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Report'
        400:
          description: Bad Request
        401:
          description: Unauthrized
        409:
          description: Conflict
        500:
          description: Server Error


  /api/v1/reports/{id}:
    # [GET] reports/id
    get:
      tags:
        - Reports
      summary: Find report by id
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Report'
        400:
          description: "Bad Request"
        401:
          description: "Unauthorized"
        409:
          description: "Conflict"
        500:
          description: "Server Error"
    # [PATCH] reports/id
    patch:
      tags:
        - Reports
      summary: Update a report by id
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          description: report id
          required: true
      requestBody:
        description: report data
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ReportRequest"
      responses:
        200:
          description: "OK"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Report'
        400:
          description: "Bad Request"
        401:
          description: "Unauthorized"
        409:
          description: "Conflict"
        500:
          description: "Server Error"

    # [DELETE] reports/id
    delete:
      tags:
        - Reports
      summary: |-
        Delete a report by id
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          description: report id
          required: true
      responses:
        200:
          description: "OK"
        400:
          description: "Bad Request"
        401:
          description: "Unauthorized"
        409:
          description: "Conflict"
        500:
          description: "Server Error"

components:
  #-------------------------------
  # Reusable schemas (data models)
  #-------------------------------
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    LoginRequest:
      type: object
      required:
        - email
        - password
      properties:
        email:
          type: string
          description: email
        password:
          type: string
          description: password - 8 ~ 20 lowercase, uppercase, and numbers or special characters
    User:
      type: object
      properties:
        firstName:
          type: string
          description: first name
        lastName:
          type: string
          description: last name
        email:
          type: string
          description: email
        title:
          type: string
          description: job title
        ministry:
          type: string
          description: ministry
        role:
          type: string
          description: role in reporting process

    UserRequest:
      allOf:
        - $ref: '#/components/schemas/LoginRequest'
        - $ref: '#/components/schemas/User'

    ProjectRequest:
      type: object
      properties:
        name:
          type: string
          description: project name
        cpsIdentifier:
          type: string
          description: cpsIdentifier
        projectNumber:
          type: string
          description: project number
        description:
          type: string
          description: project description
        ministry:
          type: string
          description: project ministry
        program:
          type: string
          description: project program
        sponsor:
          type: string
          description: project sponsor's id
        manager:
          type: string
          description: project manager's id
        financialContact:
          type: string
          description: project financialContact's id
        start:
          type: string
          description: project start date
        end:
          type: string
          description: project end date
        estimatedEnd:
          type: string
          description: project estimated end date
        progress:
          type: number
          description: project progress
        phase:
          type: string
          description: project phase

    ReportRequest:
      type: object
      description: request body data to create a report
      properties:
        submitter:
          type: string
          description: user to write and submit the report
        projectId:
          type: string
          description: project's id
        state:
          type: number
          enum: [0, 1, 2]
          description: default is 0. 0 = Draft, 1 = Review, 3 = Submitted
        year:
          type: number
          description: reporting year
        quarter:
          type: string
          description: reporting quarter, [Q1, Q2, Q3a, Q3b, Q4]
          enum: [Q1, Q2, Q3a, Q3b, Q4]
        phase:
          type: string
          description: phase describing where the project is.
        progress:
          type: number
          description: project progress
        estimatedEnd:
          type: string
          description: project estimated end date

    Report:
      allOf:
        - $ref: '#/components/schemas/ReportRequest'
        - type: object
          properties:
            submitter:
              $ref: '#/components/schemas/User'
              description: user to write and submit the report
            id:
              type: string
              description: id

    Project:
      allOf:
        - $ref: '#/components/schemas/ProjectRequest'
        - type: object
          properties:
            id:
              type: string
              description: id
            sponsor:
              description: project sponsor
              $ref: '#/components/schemas/User'
            manager:
              description: project manager
              $ref: '#/components/schemas/User'
            financialContact:
              description: project financialContact
              $ref: '#/components/schemas/User'

security:
  - bearerAuth: []
schemes:
  - https
  - http
