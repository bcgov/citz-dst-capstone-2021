openapi: 3.0.0
info:
  title: RDSI API
  description: RDSI API
  version: 1.0.0
  # TODO: (nick) need to update descriptions and summaries

servers:
  - url: https://rdsi-client.adccd1-prod.apps.silver.devops.gov.bc.ca/api/v1
    description: RDSI API Production
  - url: http://localhost:8080/api/v1
    description: RDSI API Test

paths:
  /api/v1/signup:
    post:
      tags:
        - Auth
        - Users
      summary: Sign up with user profile
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserRequest"
      responses:
        201:
          description: "Created"
        400:
          description: "Bad Request"
        409:
          description: "Conflict"
        500:
          description: "Server Error"

  /api/v1/login:
    post:
      tags:
        - Auth
      summary: Login with email and password
      requestBody:
        description: userdata
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/LoginRequest"
      responses:
        200:
          description: "OK"
        409:
          description: "Conflict"

  /api/v1/logout:
    security:
      - bearerAuth: []
    post:
      tags:
        - Auth
      summary: Log out with auth
      responses:
        200:
          description: "OK"
        401:
          description: "Unauthorized"

  /api/v1/users:
    # [GET] users
    get:
      security:
        - bearerAuth: []
      tags:
        - Users
      summary: Find All Users
      responses:
        200:
          description: A list of users.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
        401:
          description: 'Unauthorized'
        500:
          description: "Server Error"

    # [POST] users
    post:
      tags:
        - Users
      summary: Add User
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserRequest"
      responses:
        201:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        400:
          description: Bad Request
        409:
          description: Conflict
        500:
          description: Server Error

  /api/v1/users/{id}:
    # [GET] users/id
    get:
      tags:
        - Users
      summary: Find User By Id
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
      responses:
        200:
          description: "OK"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        401:
          $ref: '#/components/responses/UnauthorizedError'
        409:
          description: "Conflict"
        500:
          description: "Server Error"

    # [PATCH] users/id
    patch:
      tags:
        - Users
      summary: Update User By Id
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          type: string
          required: true
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserRequest"
      responses:
        200:
          description: "OK"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        400:
          description: "Bad Request"
        401:
          $ref: '#/components/responses/UnauthorizedError'
        409:
          description: "Conflict"
        500:
          description: "Server Error"

    # [DELETE] users/id
    delete:
      tags:
        - Users
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
      responses:
        200:
          description: "OK"
        409:
          description: "Conflict"
        500:
          description: "Server Error"

  # [GET] projects
  /api/v1/projects:
    get:
      tags:
        - Projects
      security:
        - bearerAuth: []
      summary: Find all projects
      responses:
        200:
          description: OK
        500:
          description: Server Error
    post:
      tags:
        - Projects
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ProjectRequest"
      responses:
        201:
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Project'
        400:
          description: Bad Request
        409:
          description: Conflict
        500:
          description: Server Error

  /api/v1/projects/{id}:
    # [GET] projects/id
    get:
      tags:
        - Projects
      summary: Find all projects
      security:
        - bearerAuth: []
      responses:
        200:
          description: OK
        400:
          description: Bad request
        401:
          description: Unauthrized
        500:
          description: Server Error
    # [PATCH] projects/id
    patch:
      tags:
        - Projects
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ProjectRequest"
      responses:
        200:
          description: 'Updated'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Project'
        400:
          description: "Bad Request"
        401:
          description: "Unauthorized"
        409:
          description: "Conflict"
        500:
          description: "Server Error"

    # [DELETE] projects/id
    delete:
      tags:
        - Projects
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
      responses:
        200:
          description: "OK"
        400:
          description: "Bad Request"
        401:
          description: "Unauthorized"
        409:
          description: "Conflict"
        500:
          description: "Server Error"

  /api/v1/reports:
    get:
      tags:
        - Reports
      summary: Find reports for the project
      security:
        - bearerAuth: []
      parameters:
        - name: projectId
          in: query
          required: true
        - name: year
          in: query
        - name: quarter
          in: query
          enum: [Q1, Q2, Q3a, Q3b, Q4]
      responses:
        200:
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Report'
        400:
          description: "Bad Request"
        401:
          description: "Unauthorized"
        409:
          description: "Conflict"
        500:
          description: "Server Error"
    post:
      tags:
        - Reports
      security:
        - bearerAuth: [ ]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ReportRequest"
      responses:
        201:
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Report'
        400:
          description: Bad Request
        401:
          description: Unauthrized
        409:
          description: Conflict
        500:
          description: Server Error
  /api/v1/reports/{id}:
    # [GET] reports/id
    get:
      tags:
        - Reports
      summary: Find report by id
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Report'
        400:
          description: "Bad Request"
        401:
          description: "Unauthorized"
        409:
          description: "Conflict"
        500:
          description: "Server Error"
    patch:
      tags:
        - Reports
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ReportRequest"
      responses:
        200:
          description: "OK"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Report'
        400:
          description: "Bad Request"
        401:
          description: "Unauthorized"
        409:
          description: "Conflict"
        500:
          description: "Server Error"

    delete:
      tags:
        - Reports
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
      responses:
        200:
          description: "OK"
        400:
          description: "Bad Request"
        401:
          description: "Unauthorized"
        409:
          description: "Conflict"
        500:
          description: "Server Error"

  /api/v1/reports/{id}/milestones:
    get:
      tags:
        - Reports
        - Milestones
      summary: Find all milestones of a report
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          description: report id
          required: true
      responses:
        200:
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Milestone'
        400:
          description: Bad request
        401:
          description: Unauthorized
        404:
          description: Not found
    post:
      tags:
        - Reports
        - Milestones
      summary: Post a new milestone
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/MilestoneRequest"
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Report'
        400:
          description: Bad request
        401:
          description: Unauthorized
        404:
          description: Not found
        500:
          description: Server error

  /api/v1/reports/{id}/milestones/{mid}:
    patch:
      tags:
        - Reports
        - Milestones
      summary: Update a milestone
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          description: report id
          required: true
        - name: mid
          in: path
          description: milestone id
          required: true
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/MilestoneRequest"
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Report'
        400:
          description: Bad request
        401:
          description: Unauthorized
        404:
          description: Not found
        500:
          description: Server error

    delete:
      tags:
        - Reports
        - Milestones
      summary: Delete a milestone
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          description: report id
          required: true
        - name: mid
          in: path
          description: milestone id
          required: true
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Report'
        400:
          description: Bad request
        401:
          description: Unauthorized
        404:
          description: Not found
        500:
          description: Server error

  /api/v1/reports/{id}/objectives:
    get:
      tags:
        - Reports
        - Objectives
      summary: Find all objectives of a report
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          description: report id
          required: true
      responses:
        200:
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Objective'
        400:
          description: Bad request
        401:
          description: Unauthorized
        404:
          description: Not found
        500:
          description: Server error
    post:
      tags:
        - Reports
        - Objectives
      summary: Post a new objective
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ObjectiveRequest"
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Report'
        400:
          description: Bad request
        401:
          description: Unauthorized
        404:
          description: Not found
        500:
          description: Server error

  /api/v1/reports/{id}/objectives/{oid}:
    patch:
      tags:
        - Reports
        - Objectives
      summary: Update an objective
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          description: report id
          required: true
        - name: oid
          in: path
          description: objective id
          required: true
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ObjectiveRequest"
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Report'
        400:
          description: Bad request
        401:
          description: Unauthorized
        404:
          description: Not found
        500:
          description: Server error

    delete:
      tags:
        - Reports
        - Objectives
      summary: Delete an objective
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          description: report id
          required: true
        - name: oid
          in: path
          description: objective id
          required: true
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Report'
        400:
          description: Bad request
        401:
          description: Unauthorized
        404:
          description: Not found
        500:
          description: Server error

  /api/v1/reports/{id}/statuses:
    get:
      tags:
        - Reports
        - ReportStatus
      summary: Find all objectives of a report
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          description: report id
          required: true
      responses:
        200:
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ReportStatus'
        400:
          description: Bad request
        401:
          description: Unauthorized
        404:
          description: Not found
        500:
          description: Server error
    post:
      tags:
        - Reports
        - ReportStatus
      summary: Post a new report status
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ReportStatusRequest"
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Report'
        400:
          description: Bad request
        401:
          description: Unauthorized
        404:
          description: Not found
        500:
          description: Server error

  /api/v1/reports/{id}/statuses/{sid}:
    patch:
      tags:
        - Reports
        - ReportStatus
      summary: Update an report status
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          description: report id
          required: true
        - name: sid
          in: path
          description: report status id
          required: true
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ReportStatusRequest"
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Report'
        400:
          description: Bad request
        401:
          description: Unauthorized
        404:
          description: Not found
        500:
          description: Server error

    delete:
      tags:
        - Reports
        - ReportStatus
      summary: Delete a report status
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          description: report id
          required: true
        - name: sid
          in: path
          description: report status id
          required: true
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Report'
        400:
          description: Bad request
        401:
          description: Unauthorized
        404:
          description: Not found
        500:
          description: Server error
components:
  #-------------------------------
  # Reusable schemas (data models)
  #-------------------------------
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    CommonProperties:
      properties:
        id:
          type: string
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
    LoginRequest:
      type: object
      properties:
        email:
          type: string
          format: email
        password:
          type: string
          format: password
          description: password - 8 ~ 20 lowercase, uppercase, and numbers or special characters
      required:
        - email
        - password
    User:
      type: object
      properties:
        firstName:
          type: string
        lastName:
          type: string
        email:
          type: string
        title:
          type: string
        ministry:
          type: string
        role:
          type: string
          enum:
            - Admin
            - Executive
            - FA
            - User
            - Submitter
      required:
        - firstName
        - lastName
        - email
        - title
        - ministry
    ProjectRequest:
      type: object
      properties:
        name:
          type: string
        cpsIdentifier:
          type: string
        projectNumber:
          type: string
        description:
          type: string
        ministry:
          type: string
        program:
          type: string
        sponsor:
          type: string
        manager:
          type: string
        financialContact:
          type: string
        start:
          type: string
          format: date
        end:
          type: string
          format: date
        estimatedEnd:
          type: string
        progress:
          type: integer
          minimum: 0
          maximum: 100
        phase:
          type: string
      required:
        - name
        - cpsIdentifier
        - description
        - ministry
        - program
        - sponsor
        - manager
        - financialContact
        - start
        - phase
    ReportRequest:
      type: object
      properties:
        submitter:
          type: string
        projectId:
          type: string
        state:
          type: number
          enum:
            - 0 # Draft
            - 1 # Review
            - 2 # Submitted
        year:
          type: integer
        quarter:
          type: string
          enum: [Q1, Q2, Q3a, Q3b, Q4]
        phase:
          type: string
        progress:
          type: integer
          minimum: 0
          maximum: 100
        estimatedEnd:
          type: string
          format: date
        milestones:
          type: array
          items:
            $ref: '#/components/schemas/Milestone'
      required:
        - submitter
        - projectId
        - year
        - quarter
        - estimatedEnd
    MilestoneRequest:
      type: object
      properties:
        name:
          type: string
        description:
          type: string
        status:
          type: integer
          enum:
            - 0 # Green
            - 1 # Yellow
            - 2 # Red
            - 3 # Completed
            - 4 # NotStarted
        progress:
          type: number
          minimum: 0
          maximum: 100
        start:
          type: string
          format: date
        estimatedEnd:
          type: string
          format: date
        comments:
          type: string
      required:
        - name
        - start
        - estimatedEnd
    ObjectiveRequest:
      type: object
      properties:
        name:
          type: string
        description:
          type: string
        status:
          type: integer
          enum:
            - 0 # Green
            - 1 # Yellow
            - 2 # Red
        estimatedEnd:
          type: string
          format: date
        comments:
          type: string
      required:
        - name
        - start
        - estimatedEnd
    ReportStatusRequest:
      type: object
      properties:
        type:
          type: integer
          enum:
            - 0 # Overall
            - 1 # Scope
            - 2 # Budget
            - 3 # Schedule
            - 4 # Other
        status:
          type: integer
          enum:
            - 0 # Green
            - 1 # Yellow
            - 2 # Red
        trend:
          type: integer
          enum:
            - 0 # Green
            - 1 # Yellow
            - 2 # Red
            - 3 # Completed
            - 4 # NotStarted
        comments:
          type: string
      required:
        - name
        - type
    Milestone:
      allOf:
        - $ref: '#/components/schemas/MilestoneRequest'
        - $ref: '#/components/schemas/CommonProperties'
    Objective:
      allOf:
        - $ref: '#/components/schemas/ObjectiveRequest'
        - $ref: '#/components/schemas/CommonProperties'
    ReportStatus:
      allOf:
        - $ref: '#/components/schemas/ReportStatusRequest'
        - $ref: '#/components/schemas/CommonProperties'
    Project:
      allOf:
        - $ref: '#/components/schemas/ProjectRequest'
        - $ref: '#/components/schemas/CommonProperties'
        - type: object
          properties:
            sponsor:
              $ref: '#/components/schemas/User'
            manager:
              $ref: '#/components/schemas/User'
            financialContact:
              $ref: '#/components/schemas/User'
    Report:
      allOf:
        - $ref: '#/components/schemas/ReportRequest'
        - $ref: '#/components/schemas/CommonProperties'
        - type: object
          properties:
            submitter:
              $ref: '#/components/schemas/User'
    UserRequest:
      allOf:
        - $ref: '#/components/schemas/LoginRequest'
        - $ref: '#/components/schemas/User'
security:
  - bearerAuth: []
schemes:
  - https
  - http
